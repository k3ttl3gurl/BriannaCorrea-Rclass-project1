---
title: "Brianna Correa: Cleaning Script"
author: "Brianna Correa"
date: "2023-03-03"
format: html
---

## Processing script (data cleaning)

### Setup

Load needed packages. Make sure they are installed.

```{r}
require(dplyr)   # for data processing/cleaning
require(tidyr)   # for data processing/cleaning
require(skimr)   # for nice visualization of data 
```

---

### Data loading

Start R in the same directory that this script resides in: `project_root/Code/Processing_code`.
If needed, check your working directory with `getwd()`.

**Never** put a `setwd()` inside your code — it's bad etiquette and will likely break for others.

```{r}
# Path to data using relative paths
data_location <- "../../Data/Raw_data/penguins_raw_dirty.csv"
data_path <- "../../Data/Raw_data/"
```

---

### Load data

Use `check.names=FALSE` to preserve original column names (which include spaces/parentheses).

```{r}
rawdata <- read.csv(data_location, check.names=FALSE)
```

---

### Check data

Use the data dictionary for context.

```{r}
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))
print(dictionary)
```

Basic overviews:

```{r}
dplyr::glimpse(rawdata)
summary(rawdata)
head(rawdata)
skimr::skim(rawdata)
```

---

### Cleaning

#### Species names

There are 9 unique species — we expect only 3. Let's examine and clean them.

```{r}
unique(rawdata$Species)
d1 <- rawdata
```

Fix mispellings:

```{r}
ii <- grep("PengTin", d1$Species)
d1$Species[ii] <- "Adelie Penguin (Pygoscelis adeliae)"
d1$Species <- sub("gTin", "guin", d1$Species)
unique(d1$Species)
```

Shorten species to common names:

```{r}
d1$Species <- dplyr::case_when(
  grepl("Adelie", d1$Species) ~ "Adelie",
  grepl("Chinstrap", d1$Species) ~ "Chinstrap",
  grepl("Gentoo", d1$Species) ~ "Gentoo",
  TRUE ~ NA_character_
)
```

---

#### Continuous data

Fix `"missing"` in `Culmen Length (mm)` and convert to numeric:

```{r}
cl <- d1$`Culmen Length (mm)`
cl[cl == "missing"] <- NA
cl <- as.numeric(cl)
d1$`Culmen Length (mm)` <- cl
```

Check data:

```{r}
skimr::skim(d1)
hist(d1$`Culmen Length (mm)`)
plot(d1$`Body Mass (g)`, d1$`Culmen Length (mm)`)
```

Fix large `Culmen Length (mm)` values (likely off by 10):

```{r}
d2 <- d1
cl <- d2$`Culmen Length (mm)`
cl[!is.na(cl) & cl > 300] <- cl[!is.na(cl) & cl > 300] / 10
d2$`Culmen Length (mm)` <- cl
```

Re-check:

```{r}
skimr::skim(d2)
hist(d2$`Culmen Length (mm)`)
plot(d2$`Body Mass (g)`, d2$`Culmen Length (mm)`)
```

Fix tiny mass values:

```{r}
d3 <- d2
mm <- d3$`Body Mass (g)`
mm[mm < 100] <- NA
nas <- which(is.na(mm))
d3 <- d3[-nas, ]
```

Check again:

```{r}
skimr::skim(d3)
hist(d3$`Body Mass (g)`)
plot(d3$`Body Mass (g)`, d3$`Culmen Length (mm)`)
```

Convert some variables to factors:

```{r}
d3$Species <- as.factor(d3$Species)
d3$Sex <- as.factor(d3$Sex)
d3$Island <- as.factor(d3$Island)
skimr::skim(d3)
```

---

### Final data check

Make histograms/density plots for continuous data by discrete groups to check for strange categories or value ranges.

---

### Save cleaned data

```{r}
processeddata <- d3

save_data_location <- "../../Data/Processed_data/processeddata.rds"
saveRDS(processeddata, file = save_data_location)

save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
```

---

### Notes

* Dealing with NA or "bad" data: removing faulty/missing rows is one approach. You could alternatively keep partially missing individuals depending on your analysis goals.
